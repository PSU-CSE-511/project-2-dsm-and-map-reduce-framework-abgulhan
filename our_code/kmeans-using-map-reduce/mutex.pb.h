// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mutex.proto

#ifndef PROTOBUF_INCLUDED_mutex_2eproto
#define PROTOBUF_INCLUDED_mutex_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mutex_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_mutex_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_mutex_2eproto();
namespace mutex {
class mutex_deferred_reply;
class mutex_deferred_replyDefaultTypeInternal;
extern mutex_deferred_replyDefaultTypeInternal _mutex_deferred_reply_default_instance_;
class mutex_reply;
class mutex_replyDefaultTypeInternal;
extern mutex_replyDefaultTypeInternal _mutex_reply_default_instance_;
class mutex_request;
class mutex_requestDefaultTypeInternal;
extern mutex_requestDefaultTypeInternal _mutex_request_default_instance_;
}  // namespace mutex
namespace google {
namespace protobuf {
template<> ::mutex::mutex_deferred_reply* Arena::CreateMaybeMessage<::mutex::mutex_deferred_reply>(Arena*);
template<> ::mutex::mutex_reply* Arena::CreateMaybeMessage<::mutex::mutex_reply>(Arena*);
template<> ::mutex::mutex_request* Arena::CreateMaybeMessage<::mutex::mutex_request>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace mutex {

// ===================================================================

class mutex_request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mutex.mutex_request) */ {
 public:
  mutex_request();
  virtual ~mutex_request();

  mutex_request(const mutex_request& from);

  inline mutex_request& operator=(const mutex_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mutex_request(mutex_request&& from) noexcept
    : mutex_request() {
    *this = ::std::move(from);
  }

  inline mutex_request& operator=(mutex_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mutex_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mutex_request* internal_default_instance() {
    return reinterpret_cast<const mutex_request*>(
               &_mutex_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(mutex_request* other);
  friend void swap(mutex_request& a, mutex_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mutex_request* New() const final {
    return CreateMaybeMessage<mutex_request>(nullptr);
  }

  mutex_request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mutex_request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mutex_request& from);
  void MergeFrom(const mutex_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mutex_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 lockno = 1;
  void clear_lockno();
  static const int kLocknoFieldNumber = 1;
  ::google::protobuf::int32 lockno() const;
  void set_lockno(::google::protobuf::int32 value);

  // int32 sequence_no = 2;
  void clear_sequence_no();
  static const int kSequenceNoFieldNumber = 2;
  ::google::protobuf::int32 sequence_no() const;
  void set_sequence_no(::google::protobuf::int32 value);

  // int32 id = 3;
  void clear_id();
  static const int kIdFieldNumber = 3;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mutex.mutex_request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 lockno_;
  ::google::protobuf::int32 sequence_no_;
  ::google::protobuf::int32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mutex_2eproto;
};
// -------------------------------------------------------------------

class mutex_reply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mutex.mutex_reply) */ {
 public:
  mutex_reply();
  virtual ~mutex_reply();

  mutex_reply(const mutex_reply& from);

  inline mutex_reply& operator=(const mutex_reply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mutex_reply(mutex_reply&& from) noexcept
    : mutex_reply() {
    *this = ::std::move(from);
  }

  inline mutex_reply& operator=(mutex_reply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mutex_reply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mutex_reply* internal_default_instance() {
    return reinterpret_cast<const mutex_reply*>(
               &_mutex_reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(mutex_reply* other);
  friend void swap(mutex_reply& a, mutex_reply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mutex_reply* New() const final {
    return CreateMaybeMessage<mutex_reply>(nullptr);
  }

  mutex_reply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mutex_reply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mutex_reply& from);
  void MergeFrom(const mutex_reply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mutex_reply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 acknowledgement = 1;
  void clear_acknowledgement();
  static const int kAcknowledgementFieldNumber = 1;
  ::google::protobuf::int32 acknowledgement() const;
  void set_acknowledgement(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mutex.mutex_reply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 acknowledgement_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mutex_2eproto;
};
// -------------------------------------------------------------------

class mutex_deferred_reply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mutex.mutex_deferred_reply) */ {
 public:
  mutex_deferred_reply();
  virtual ~mutex_deferred_reply();

  mutex_deferred_reply(const mutex_deferred_reply& from);

  inline mutex_deferred_reply& operator=(const mutex_deferred_reply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mutex_deferred_reply(mutex_deferred_reply&& from) noexcept
    : mutex_deferred_reply() {
    *this = ::std::move(from);
  }

  inline mutex_deferred_reply& operator=(mutex_deferred_reply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const mutex_deferred_reply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mutex_deferred_reply* internal_default_instance() {
    return reinterpret_cast<const mutex_deferred_reply*>(
               &_mutex_deferred_reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(mutex_deferred_reply* other);
  friend void swap(mutex_deferred_reply& a, mutex_deferred_reply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mutex_deferred_reply* New() const final {
    return CreateMaybeMessage<mutex_deferred_reply>(nullptr);
  }

  mutex_deferred_reply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mutex_deferred_reply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mutex_deferred_reply& from);
  void MergeFrom(const mutex_deferred_reply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mutex_deferred_reply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 sender = 1;
  void clear_sender();
  static const int kSenderFieldNumber = 1;
  ::google::protobuf::int32 sender() const;
  void set_sender(::google::protobuf::int32 value);

  // int32 lockno = 2;
  void clear_lockno();
  static const int kLocknoFieldNumber = 2;
  ::google::protobuf::int32 lockno() const;
  void set_lockno(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mutex.mutex_deferred_reply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 sender_;
  ::google::protobuf::int32 lockno_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mutex_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// mutex_request

// int32 lockno = 1;
inline void mutex_request::clear_lockno() {
  lockno_ = 0;
}
inline ::google::protobuf::int32 mutex_request::lockno() const {
  // @@protoc_insertion_point(field_get:mutex.mutex_request.lockno)
  return lockno_;
}
inline void mutex_request::set_lockno(::google::protobuf::int32 value) {
  
  lockno_ = value;
  // @@protoc_insertion_point(field_set:mutex.mutex_request.lockno)
}

// int32 sequence_no = 2;
inline void mutex_request::clear_sequence_no() {
  sequence_no_ = 0;
}
inline ::google::protobuf::int32 mutex_request::sequence_no() const {
  // @@protoc_insertion_point(field_get:mutex.mutex_request.sequence_no)
  return sequence_no_;
}
inline void mutex_request::set_sequence_no(::google::protobuf::int32 value) {
  
  sequence_no_ = value;
  // @@protoc_insertion_point(field_set:mutex.mutex_request.sequence_no)
}

// int32 id = 3;
inline void mutex_request::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 mutex_request::id() const {
  // @@protoc_insertion_point(field_get:mutex.mutex_request.id)
  return id_;
}
inline void mutex_request::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:mutex.mutex_request.id)
}

// -------------------------------------------------------------------

// mutex_reply

// int32 acknowledgement = 1;
inline void mutex_reply::clear_acknowledgement() {
  acknowledgement_ = 0;
}
inline ::google::protobuf::int32 mutex_reply::acknowledgement() const {
  // @@protoc_insertion_point(field_get:mutex.mutex_reply.acknowledgement)
  return acknowledgement_;
}
inline void mutex_reply::set_acknowledgement(::google::protobuf::int32 value) {
  
  acknowledgement_ = value;
  // @@protoc_insertion_point(field_set:mutex.mutex_reply.acknowledgement)
}

// -------------------------------------------------------------------

// mutex_deferred_reply

// int32 sender = 1;
inline void mutex_deferred_reply::clear_sender() {
  sender_ = 0;
}
inline ::google::protobuf::int32 mutex_deferred_reply::sender() const {
  // @@protoc_insertion_point(field_get:mutex.mutex_deferred_reply.sender)
  return sender_;
}
inline void mutex_deferred_reply::set_sender(::google::protobuf::int32 value) {
  
  sender_ = value;
  // @@protoc_insertion_point(field_set:mutex.mutex_deferred_reply.sender)
}

// int32 lockno = 2;
inline void mutex_deferred_reply::clear_lockno() {
  lockno_ = 0;
}
inline ::google::protobuf::int32 mutex_deferred_reply::lockno() const {
  // @@protoc_insertion_point(field_get:mutex.mutex_deferred_reply.lockno)
  return lockno_;
}
inline void mutex_deferred_reply::set_lockno(::google::protobuf::int32 value) {
  
  lockno_ = value;
  // @@protoc_insertion_point(field_set:mutex.mutex_deferred_reply.lockno)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mutex

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_mutex_2eproto
